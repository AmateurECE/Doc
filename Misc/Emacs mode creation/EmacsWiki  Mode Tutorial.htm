<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>EmacsWiki: Mode Tutorial</title><link rel="alternate" type="application/wiki" title="Edit this page" href="https://www.emacswiki.org/emacs?action=edit;id=ModeTutorial"><link type="text/css" rel="stylesheet" href="EmacsWiki%20%20Mode%20Tutorial_files/light.css"><meta name="robots" content="INDEX,FOLLOW"><link rel="alternate" type="application/rss+xml" title="EmacsWiki" href="https://www.emacswiki.org/emacs?action=rss"><link rel="alternate" type="application/rss+xml" title="EmacsWiki: ModeTutorial" href="https://www.emacswiki.org/emacs?action=rss;rcidonly=ModeTutorial">
<link rel="alternate" type="application/rss+xml" title="Emacs Wiki with page content" href="https://www.emacswiki.org/full.rss">
<link rel="alternate" type="application/rss+xml" title="Emacs Wiki with page content and diff" href="https://www.emacswiki.org/full-diff.rss">
<link rel="alternate" type="application/rss+xml" title="Emacs Wiki including minor differences" href="https://www.emacswiki.org/minor-edits.rss">
<link rel="alternate" type="application/rss+xml" title="Changes for ModeTutorial only" href="https://www.emacswiki.org/emacs?action=rss;rcidonly=ModeTutorial"><meta content="width=device-width" name="viewport">
<script type="text/javascript" src="EmacsWiki%20%20Mode%20Tutorial_files/outliner.js"></script>
<script type="text/javascript">

  function addOnloadEvent(fnc) {
    if ( typeof window.addEventListener != "undefined" )
      window.addEventListener( "load", fnc, false );
    else if ( typeof window.attachEvent != "undefined" ) {
      window.attachEvent( "onload", fnc );
    }
    else {
      if ( window.onload != null ) {
	var oldOnload = window.onload;
	window.onload = function ( e ) {
	  oldOnload( e );
	  window[fnc]();
	};
      }
      else
	window.onload = fnc;
    }
  }

  // https://stackoverflow.com/questions/280634/endswith-in-javascript
  if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
  }

  var initToc=function() {

    var outline = HTML5Outline(document.body);
    if (outline.sections.length == 1) {
      outline.sections = outline.sections[0].sections;
    }

    if (outline.sections.length > 1
	|| outline.sections.length == 1
           && outline.sections[0].sections.length > 0) {

      var toc = document.getElementById('toc');

      if (!toc) {
	var divs = document.getElementsByTagName('div');
	for (var i = 0; i < divs.length; i++) {
	  if (divs[i].getAttribute('class') == 'toc') {
	    toc = divs[i];
	    break;
	  }
	}
      }

      if (!toc) {
	var h2 = document.getElementsByTagName('h2')[0];
	if (h2) {
	  toc = document.createElement('div');
	  toc.setAttribute('class', 'toc');
	  h2.parentNode.insertBefore(toc, h2);
	}
      }

      if (toc) {
        var html = outline.asHTML(true);
        toc.innerHTML = html;

	items = toc.getElementsByTagName('a');
	for (var i = 0; i < items.length; i++) {
	  while (items[i].textContent.endsWith('✎')) {
            var text = items[i].childNodes[0].nodeValue;
	    items[i].childNodes[0].nodeValue = text.substring(0, text.length - 1);
	  }
	}
      }
    }
  }

  addOnloadEvent(initToc);
  </script>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body class="default"><div class="header"><a class="logo" href="https://www.emacswiki.org/emacs/SiteMap"><img alt="[Home]" class="logo" src="EmacsWiki%20%20Mode%20Tutorial_files/logo218x38.png"></a><div class="menu"><span class="gotobar bar"><a class="local" href="https://www.emacswiki.org/emacs/SiteMap">SiteMap</a> <a class="local" href="https://www.emacswiki.org/emacs/Search">Search</a> <a class="local" href="https://www.emacswiki.org/emacs/ElispArea">ElispArea</a> <a class="local" href="https://www.emacswiki.org/emacs/HowTo">HowTo</a> <a class="local" href="https://www.emacswiki.org/emacs/Glossary">Glossary</a> <a class="local" href="https://www.emacswiki.org/emacs/RecentChanges">RecentChanges</a> <a class="local" href="https://www.emacswiki.org/emacs/News">News</a> <a class="local" href="https://www.emacswiki.org/emacs/Problems">Problems</a> <a class="local" href="https://www.emacswiki.org/emacs/Suggestions">Suggestions</a> </span><form method="get" action="https://www.emacswiki.org/emacs" enctype="multipart/form-data" accept-charset="utf-8" class="search"><p><label for="search">Search:</label> <input name="search" size="20" accesskey="f" id="search" type="text"> <label for="searchlang">Language:</label> <input name="lang" size="10" id="searchlang" type="text"> <input name="dosearch" value="Go!" type="submit"></p></form></div><h1><a href="https://www.emacswiki.org/emacs?search=%22ModeTutorial%22" rel="nofollow" title="Click to search for references to this page"><span style="padding-right: 0.5ex;">Mode</span><span style="padding-right: 0.5ex;">Tutorial</span></a></h1></div><div class="wrapper"><div class="content browse"><p>   <strong>An Emacs language mode creation tutorial</strong></p><p>A mode tutorial by <a class="local" href="https://www.emacswiki.org/emacs/ScottAndrewBorton">ScottAndrewBorton</a>, originally located</p><ul><li><code>http://two-wugs.net/emacs/mode-tutorial.html</code></li></ul><p>An archived copy is available below – <i>but first</i> an introduction by the author:</p><div class="color one level0"><p>
 I’ve written several Emacs modes for various obscure or in-house tool 
languages. When starting my first mode, I found that there weren’t a lot
 of lucid explanations of how to write a mode intended for language 
editing. Even <em>Writing GNU Emacs Extensions</em> <a href="http://search.barnesandnoble.com/booksearch/isbninquiry.asp?ISBN=1565922611">ISBN  1565922611</a> (<a href="http://www.amazon.com/exec/obidos/ISBN=1565922611">alternate</a>, <a href="http://www.pricescan.com/books/BookDetail.asp?isbn=1565922611">search</a>) doesn’t cover topics like syntax highlighting and indentation. And <code>generic-mode</code>, distributed with recent versions of Emacs, doesn’t handle indentation.</p><p>Here, I walk through my <a class="local" href="https://www.emacswiki.org/emacs/wpdl-mode.el">wpdl-mode.el</a>, a mode for editing <a class="url http outside" href="http://www.wfmc.org/">Workflow Process Definition Language</a>
 files. I simply go through each line of the mode, and explain what it 
does. It may also be helpful to refer to this WPDL example<a class="local" href="https://www.emacswiki.org/emacs/ex1-wpd.txt">ex1-wpd.txt</a>, to see how the concepts are being applied. Hopefully <code>wpdl-mode</code> is clear and simple enough for you to learn the basics of writing your own mode.</p><p>The following information was written with GNU Emacs versions 20 or 21 in mind. <strong>NB:</strong>
 Since I am not a professional Emacs hacker, some of this might be a 
case of the blind leading the blind. More experienced Emacs guys may 
take offense at the style or terminology, and will hopefully <a class="url mailto outside" href="mailto:scott-web@two-wugs.net">correct my ignorance.</a> Thanks to readers on <a class="local" href="https://www.emacswiki.org/emacs/comp.emacs">comp.emacs</a> and <a class="local" href="https://www.emacswiki.org/emacs/gnu.emacs.help">gnu.emacs.help</a> who have already contributed suggestions! – <a class="local" href="https://www.emacswiki.org/emacs/ScottAndrewBorton">ScottAndrewBorton</a></p></div><div class="color two level0"><p> Note that the tutorial builds a new mode from the ground up. If the modes are relatively simple, then starting out with a <a class="local" href="https://www.emacswiki.org/emacs/GenericMode">GenericMode</a> or a <a class="local" href="https://www.emacswiki.org/emacs/DerivedMode">DerivedMode</a> makes more sense. Even if you decide to write most of the code yourself, starting out with <a class="local" href="https://www.emacswiki.org/emacs/SampleMode">SampleMode</a>
 might be a good idea. What the tutorial does and none of the other 
suggestions is explaining things. This is very important; so if you are 
curious to learn, then perhaps the tutorial is actually better for you. 
It even delves into such topics as <a class="local" href="https://www.emacswiki.org/emacs/RegexpOpt">RegexpOpt</a>. I recommend that.</p></div><div class="color one level0"><p> Adding my vote for this tutorial. Between the explanations it provides and the full example provided by <a class="local" href="https://www.emacswiki.org/emacs/SampleMode">SampleMode</a>, bootstrapping my first mode was really quite painless, and not nearly as scary as I thought it would be. --mdxi</p></div><div class="toc"><ol><li><a href="#toc1">Basic mode setup</a></li><li><a href="#toc2">Syntax highlighting using keywords</a></li><li><a href="#toc3">Indentation</a></li><li><a href="#toc4">The syntax table</a></li><li><a href="#toc5">The entry function</a></li><li><a href="#toc6">The most important line</a></li><li><a href="#toc7">A word about style</a></li><li><a href="#toc8">Implementation alternatives</a></li><li><a href="#toc9">Acknowledgements</a></li></ol></div><h2 id="toc1">Basic mode setup</h2><pre>(<span class="keyword">defvar</span> <span class="variable">wpdl-mode-hook</span> nil)
</pre><p>First, we define some variables that all modes should define. <code>‘wpdl-mode-hook’</code> allows the user to run their own code when your mode is run. </p><pre>(<span class="keyword">defvar</span> <span class="variable">wpdl-mode-map</span>
  (<span class="keyword elisp">let</span> ((map (make-keymap)))
    (define-key map <span class="string">"\C-j"</span> 'newline-and-indent)
    map)
  <span class="string">"Keymap for WPDL major mode"</span>)
</pre><p>Now we create a keymap. This map, here called <code>‘wpdl-mode-map’</code>, allows both you and users to define their own keymaps. The keymap is immediately set to a default keymap. Then, using <code>‘define-key’</code>, we insert an example keybinding into the keymap, which maps the <code>‘newline-and-indent’</code>
 function to Control-j (which is actually the default binding for this 
function, but is included anyway as an example). Of course, you may 
define as many keybindings as you wish.</p><p>If your keymap will have very few entries, then you may want to consider <code>‘make-sparse-keymap’</code> rather than <code>‘make-keymap’</code>. </p><pre><span class="comment">;;;###<span class="warning">autoload</span></span>
(add-to-list 'auto-mode-alist '(<span class="string">"\\.wpd\\'"</span> . wpdl-mode))
</pre><p>Here, we append a definition to <code>‘auto-mode-alist’</code>. This tells emacs that when a buffer with a name ending with <code>.wpd</code> is opened, then <code>wpdl-mode</code> should be started in that buffer. Some modes leave this step to the user.</p><h2 id="toc2">Syntax highlighting using keywords</h2><pre>(<span class="keyword">defconst</span> <span class="variable">wpdl-font-lock-keywords-</span>1
  (list
   '(<span class="string">"\\&lt;\\(A\\(CTIVITY\\|PPLICATION\\)\\|DATA\\|END_\\(A\\(CTIVITY\\|PPLICATION\\)\\|DATA\\|MODEL\\|PARTICIPANT\\|T\\(OOL_LIST\\|RANSITION\\)\\|WORKFLOW\\)\\|MODEL\\|PARTICIPANT\\|T\\(OOL_LIST\\|RANSITION\\)\\|WORKFLOW\\)\\&gt;"</span> . font-lock-builtin-face)
   '(<span class="string">"\\('\\w*'\\)"</span> . font-lock-variable-name-face))
  <span class="string">"Minimal highlighting expressions for WPDL mode"</span>)
</pre><p>Now we have defined our minimal set of keywords for emacs to highlight. A <code>‘font-lock-keyword’</code> variable is a list of keywords to highlight. There are many ways to specify this list. I have used the form <code>(matcher
. facename)</code>. With this form, I have specified a pattern to match, and then a face name to use for the actual highlighting.</p><p>There
 are two elements to my list: the first element matches WPDL language 
keywords, and the second element matches WPDL identifier names (variable
 names). I have selected the appropriate font-lock face names for each 
type of keyword (<code>‘font-lock-builtin-face’</code> and <code>‘font-lock-variable-name-face’</code>, respectively).</p><p>For
 my keyword list, I’ve selected those WPDL keywords which would benefit 
most from being highlighted: keywords that delimit blocks of 
information. One may notice that the regexp used to specify these 
keywords is optimized. I did not have to do this by hand. Emacs provides
 the <code>‘regexp-opt’</code> function to save you from the tedious work of creating complicated regexps. <code>‘regexp-opt’</code>
 takes a list of strings and an additional optional argument. This 
optional argument controls whether or not we want to wrap the entire 
regexp in parens. In our case, we do. For example, the following 
expression:</p><pre>(regexp-opt '(<span class="string">"PARTICIPANT"</span> <span class="string">"END_PARTICIPANT"</span> <span class="string">"MODEL"</span> <span class="string">"END_MODEL"</span>
<span class="string">"WORKFLOW"</span> <span class="string">"END_WORKFLOW"</span> <span class="string">"ACTIVITY"</span> <span class="string">"END_ACTIVITY"</span> <span class="string">"TRANSITION"</span>
<span class="string">"END_TRANSITION"</span> <span class="string">"APPLICATION"</span> <span class="string">"END_APPLICATION"</span> <span class="string">"DATA"</span> <span class="string">"END_DATA"</span>
<span class="string">"TOOL_LIST"</span> <span class="string">"END_TOOL_LIST"</span>) t)
</pre><p>Results in this regexp:</p><p><code>"\\(A\\(CTIVITY\\|PPLICATION\\)\\|DATA\\|END_\\(A\\(CTIVITY\\|PPLICATION\\)\\|DATA\\|MODEL\\|PARTICIPANT\\|T\\(OOL_LIST\\|RANSITION\\)\\|WORKFLOW\\)\\|MODEL\\|PARTICIPANT\\|T\\(OOL_LIST\\|RANSITION\\)\\|WORKFLOW\\)"</code></p><p>Because font-lock is so resource-intensive, providing optimized regexps to font-lock should provide a boost in performance.</p><p>Finally, the regexp is wrapped in <code>&lt;</code> and <code>&gt;</code>.
 These indicate that the regexp should only match keywords if they are 
surrounded by either a space or a beginning/end-of-file. This ensures 
that, for example, the keyword <code>if</code> is not highlighted in the word <code>difference</code>. </p><pre>(<span class="keyword">defconst</span> <span class="variable">wpdl-font-lock-keywords-</span>2
  (append wpdl-font-lock-keywords-1
		  (list
		   '(<span class="string">"\\&lt;\\(AUTHOR\\|C\\(ONDITION\\|REATED\\)\\|DE\\(FAULT_VALUE\\|SCRIPTION\\)\\|EXTENDED_ATTRIBUTE\\|FROM\\|I\\(MPLEMENTATION\\|N_PARAMETERS\\)\\|JOIN\\|NAME\\|O\\(THERWISE\\|UT_PARAMETERS\\)\\|PERFORMER\\|ROUTE\\|S\\(PLIT\\|TATUS\\)\\|T\\(O\\(OLNAME\\)?\\|YPE\\)\\|VENDOR\\|WPDL_VERSION\\)\\&gt;"</span> . font-lock-keyword-face)
		   '(<span class="string">"\\&lt;\\(TRUE\\|FALSE\\)\\&gt;"</span> . font-lock-constant-face)))
  <span class="string">"Additional Keywords to highlight in WPDL mode"</span>)
</pre><p>Now I’ve defined the second level of highlighting. Note that 
the second level is appended to the first level, resulting in a single 
keyword variable that matches everything in both levels. Here I’ve 
specified even more keywords, along with two common WPDL constant 
values, TRUE and FALSE. </p><pre>(<span class="keyword">defconst</span> <span class="variable">wpdl-font-lock-keywords-</span>3
  (append wpdl-font-lock-keywords-2
		  (list
		   '(<span class="string">"\\&lt;\\(A\\(ND\\|PPLICATIONS\\)\\|BOOLEAN\\|HUMAN\\|INTEGER\\|NO\\|OR\\(GANISATIONAL_UNIT\\)?\\|R\\(EFERENCE\\|OLE\\)\\|S\\(TRING\\|YNCHR\\)\\|UNDER_REVISION\\|WORKFLOW\\|XOR\\)\\&gt;"</span> . font-lock-constant-face)))
  <span class="string">"Balls-out highlighting in WPDL mode"</span>)
</pre><p>I’ve now defined more WPDL constants. This completes the list of WPDL keywords. </p><pre>(<span class="keyword">defvar</span> <span class="variable">wpdl-font-lock-keywords</span> wpdl-font-lock-keywords-3
  <span class="string">"Default highlighting expressions for WPDL mode"</span>)
</pre><p>Here I’ve defined the default level of highlighting to be the 
maximum. This is just my preference – the user can change this variable 
(if the user knows how! This might be something to put in the 
documentation for your own mode).</p><h2 id="toc3">Indentation</h2><p>WPDL
 features a Pascal-like syntax. This provides a natural basis for 
indentation. Blocks of information can be indented away from their 
parent. Fortunately, this doesn’t seem to be too difficult to accomplish
 with Emacs – the indentation code for <code>wpdl-mode</code> is only 28 lines long. Here is some example WPDL code, including indentation:</p><pre>WORKFLOW	'In_the_Mail_Room'
    CREATED	1998-07-15
    NAME	<span class="string">"In the Mail Room"</span>

    ACTIVITY	'MailRoom'
        NAME	<span class="string">"Mail Room"</span>
        TOOL_LIST 
            'scan_document'
            'identify_document'
            'send_document'
        END_TOOL_LIST
        PERFORMER 'Joe'
    END_ACTIVITY

END_WORKFLOW
</pre><p>I have identified five rules for indenting WPDL code. The rules are as follows: </p><ol><li>If we are at the beginning of the buffer, indent to column 0.</li><li>If we are currently at an <code>END_</code> line, then de-indent relative to the previous line.</li><li>If we <em>first</em> see an <code>END_</code> line before our current line, then we should indent our current line to the same indentation as the <code>END_</code> line.</li><li>If we <em>first</em> see a “start line” like <code>PARTICIPANT</code>, then we need to <em>increase</em> our indentation relative to that start line.</li><li>If none of the above apply, then do not indent at all.</li></ol><p>The following WPDL code example, with comments, may clarify these ideas: </p><pre>// My activity              // Rule 1 applies
ACTIVITY    'MailRoom'      // Rule 5 applies
    NAME    <span class="string">"Mail Room"</span>     // Rule 4 (based on <span class="string">"ACTIVITY"</span>)
    TOOL_LIST               // Rule 4 (based on <span class="string">"ACTIVITY"</span>)
        'scan_document'     // Rule 4 (based on <span class="string">"TOOL_LIST"</span>)
        'identify_document' // Rule 4 (based on <span class="string">"TOOL_LIST"</span>)
        'send_document'     // Rule 4 (based on <span class="string">"TOOL_LIST"</span>)
    END_TOOL_LIST           // Rule 2
    PERFORMER 'Joe'         // Rule 3
END_ACTIVITY                // Rule 2
</pre><pre>(<span class="keyword">defun</span> <span class="function">wpdl-indent-line</span> ()
  <span class="string">"Indent current line as WPDL code"</span>
  (interactive)
  (beginning-of-line)
</pre><p>We start by defining a single function for determining how a 
given line should be indented. It may be helpful to make the function 
interactive, to aid you in testing your indentation function. Making the
 function interactive allows you to call the function directly using 
`M-x your-function’. Also, we set the point to the beginning of the 
line.</p><pre>(<span class="keyword elisp">if</span> (bobp)  <span class="comment">; Check for rule 1</span>
      (indent-line-to 0)
</pre><p>The first indentation-related thing we do is to check to see if this is the first line in the buffer, using the function <code>‘bobp’</code>. If it is, we set the indentation level to 0, using <code>‘indent-line-to’</code>. <code>‘indent-line-to’</code></p><p>indents
 the current line to the given column. Please note that if this 
condition is true, then the rest of the indentation code is not 
considered. </p><pre>  (<span class="keyword elisp">let</span> ((not-indented t) cur-indent)
</pre><p>Now we declare two variables. We will store the value of our intended indentation level for this line in <code>‘cur-indent’</code>. Then, when all of the indentation options have been considered (rules 2-5), we will finally make the indentation.</p><p>The use of <code>‘not-indented’</code> will become clear later.</p><pre>        (<span class="keyword elisp">if</span> (looking-at <span class="string">"^[ \t]*END_"</span>) <span class="comment">; Check for rule 2</span>
            (<span class="keyword elisp">progn</span>
              (<span class="keyword elisp">save-excursion</span>
                (forward-line -1)
                (setq cur-indent (- (current-indentation) default-tab-width)))
</pre><p>If we are <em>not</em> at the beginning of the buffer, then we 
start to consider other indentation options. What we do here is to check
 to see if we are at the end of a block. In WPDL, blocks are ended by 
keywords that start with <code>END_</code>. So, we check to see if we are on such a line by using the <code>‘looking-at’</code> function, using a regexp that will detect if we are at a line that starts with <code>END_</code>. Remember, we are at the beginning of the line, so we need to include any spaces or tabs in the regexp.</p><p>If we see that we are at the end of a block, we then set the indentation level. We do this by going to the <em>previous</em> line (using the <code>‘forward-line’</code> function), and then use the <code>‘current-indentation’</code> function to see how that line is indented. Then we set <code>‘cur-indent’</code> with the value of the previous line’s indentation, <em>minus</em> the <code>‘default-tab-width’</code>.</p><pre>              (<span class="keyword elisp">if</span> (&lt; cur-indent 0)
                  (setq cur-indent 0)))
</pre><p>We also include a safety check, so that we don’t try to indent past the left margin. </p><pre>        (<span class="keyword elisp">save-excursion</span> 
          (<span class="keyword elisp">while</span> not-indented
            (forward-line -1)
            (<span class="keyword elisp">if</span> (looking-at <span class="string">"^[ \t]*END_"</span>) <span class="comment">; Check for rule 3</span>
                (<span class="keyword elisp">progn</span>
                  (setq cur-indent (current-indentation))
                  (setq not-indented nil))
              <span class="comment">; Check for rule 4</span>
              (<span class="keyword elisp">if</span> (looking-at <span class="string">"^[ \t]*\\(PARTICIPANT\\|MODEL\\|APPLICATION\\|WORKFLOW\\|ACTIVITY\\|DATA\\|TOOL_LIST\\|TRANSITION\\)"</span>)
                  (<span class="keyword elisp">progn</span>
                    (setq cur-indent (+ (current-indentation) default-tab-width))
                    (setq not-indented nil))
                (<span class="keyword elisp">if</span> (bobp) <span class="comment">; Check for rule 5</span>
                    (setq not-indented nil)))))))
</pre><p>If we are not looking at an <code>END_</code> line, then we 
iterate backward through the code to find an “indentation hint”. An 
indentation hint is some token in our file which can tell us how to 
indent the line we are on <em>now</em>. The rules I have provided 
earlier tell us what the indentation hints are. At this point, we only 
need to find the hints for rules 3-5, as the first two rules have 
already been covered by previous code.</p><p>There aren’t any new Emacs lisp functions introduced here. The only thing worth noting is the use of <code>‘not-indented’</code> as a sentinel value for our while loop.</p><pre>      (<span class="keyword elisp">if</span> cur-indent
          (indent-line-to cur-indent)
        (indent-line-to 0))))) <span class="comment">; If we didn't see an indentation hint, then allow no indentation</span>
</pre><p>Finally, we execute the actual indentation, <em>if</em> we have actually identified an indentation case. We have (most likely) already stored the value of the indentation in <code>‘cur-value’</code>. If <code>‘cur-indent’</code> is empty, then we always indent to column 0.</p><p>And that concludes the indentation code for WPDL. <strong>Exercise</strong>: This indentation code is rather simple. In which cases would the code fail to create proper indentation of WPDL code? </p><h2 id="toc4">The syntax table</h2><p>Now
 we will set up a syntax table for WPDL. A syntax table tells Emacs how 
it should treat various tokens in your text for various functions, 
including movement within the buffer and syntax highlighting. For 
example, how does Emacs know to move forward by one word (as used in the
 <code>‘forward-word’</code> function)? The syntax table gives Emacs 
this kind of information. The syntax table is also used by the syntax 
highlighting package. It is for this reason that we want to modify the 
syntax table for <code>wpdl-mode</code>.</p><pre>(<span class="keyword">defvar</span> <span class="variable">wpdl-mode-syntax-table</span>
  (<span class="keyword elisp">let</span> ((st (make-syntax-table)))
</pre><p>We will use the <code>‘make-syntax-table’</code> function to 
create an empty syntax table. This function creates a syntax table that 
is a good start for most modes, as it either inherits or copies entries 
from the standard syntax table. </p><pre>    (modify-syntax-entry ?_ <span class="string">"w"</span> st)
</pre><p>The first modification we make to the syntax table is to declare the underscore character ‘<code>_</code>’ as being a valid part of a word. So now, a string like <code>foo_bar</code>
 will be treated as one word rather than two (the default Emacs 
behavior). We do this because we want to make it easier to treat WPDL 
variable names (which use underscores by convention), and, more 
importantly, keywords, as single words. <strong>NB</strong>: Treating 
underscores as non-whitespace is non-standard Emacs behavior. Here, I 
feel justified in including this modification, since so many WPDL 
keywords include underscores.</p><p>The <code>‘modify-syntax-entry’</code></p><p>function
 takes a character as its first argument, a syntax class as its second 
argument, and the syntax table to be modified as the third argument. In 
Emacs Lisp, characters are represented by using the <code>'?'</code> symbol followed by the actual character, so we use <code>?_</code>
 to represent the underscore. The syntax class indicates how a 
particular character is treated. Example syntax classes include 
“punctuation character,” “open parenthesis indicator”, and “word 
constituent.” <code>'w'</code> is the symbol for “word constituent.”</p><pre>    (modify-syntax-entry ?/ <span class="string">". 124b"</span> st)
    (modify-syntax-entry ?* <span class="string">". 23"</span> st)
    (modify-syntax-entry ?\n <span class="string">"&gt; b"</span> st)
</pre><p>WPDL comments are just like C++ comments. So, our goal is to 
program C++ comments into the WPDL syntax table. To do this, we need to 
use some extra syntax class parameters called syntax flags. Some syntax 
classes have these extra parameters to further refine the place of the 
character within the classes. The syntax class used here is <code>'.'</code>, which means “punctuation character.”</p><p>If
 we consult the Emacs lisp programming guide and see what the syntax 
flags mean, we will see that we have made the following adjustments to 
the syntax table:</p><p>1) That the character <code>'/'</code> is the <em>start</em> of a two-character comment sequence (<code>'1'</code>), that it may also be the second character of a two-character comment-start sequence (<code>'2'</code>), that it is the</p><p><em>end</em> of a two-character comment-start sequence (<code>'4'</code>), and that comment sequences that have this character as the second character in the sequence is a “b-style” comment (<code>'b'</code>).
 It’s a rule that comments that begin with a “b-style” sequence must end
 with either the same or some other “b-style” sequence.</p><p>2) That the character <code>'*'</code> is the second character of a two-character comment-start sequence (<code>'2'</code>) and that it is the <em>start</em> of a two-character <em>comment-end</em> sequence (<code>'3'</code>).</p><p>3) That the character <code>'\n'</code> (which is the newline character) <em>ends</em> a “b-style” comment.</p><p>Now we have programmed our comment style into the syntax table. The syntax highlighting mechanism (<code>font-lock</code>) will now read the syntax table and highlight WPDL comments accordingly. </p><pre>    st)
  <span class="string">"Syntax table for wpdl-mode"</span>)
</pre><p>These lines finish the definition of the syntax table, including the document string.</p><h2 id="toc5">The entry function</h2><p>Finally, we will create the function that will be called by Emacs when the mode is started. </p><pre>(<span class="keyword">defun</span> <span class="function">wpdl-mode</span> ()
  <span class="string">"Major mode for editing Workflow Process Description Language files"</span>
  (interactive)
  (kill-all-local-variables)
  (set-syntax-table wpdl-mode-syntax-table)
  (use-local-map wpdl-mode-map)
</pre><p>Here we define our entry function, give it a documentation 
string, make it interactive, and call our syntax table creation 
function. We also set our keymap for the mode. </p><pre>  (set (make-local-variable 'font-lock-defaults) '(wpdl-font-lock-keywords))
</pre><p>Now we are specifying the font-lock (syntax highlighting) 
default keywords. Note that if the user has specified her own level of 
keyword highlighting by redefinine <code>‘wpdl-font-lock-keywords’</code>, then that will be used instead of the default. </p><pre>  (set (make-local-variable 'indent-line-function) 'wpdl-indent-line)  
</pre><p>Here we register our line indentation function with Emacs. Now 
Emacs will call our function every time line indentation is required 
(like when the user calls <code>‘indent-region’</code>). </p><pre>  (setq major-mode 'wpdl-mode)
  (setq mode-name <span class="string">"WPDL"</span>)
  (run-hooks 'wpdl-mode-hook))
</pre><p>The last steps in the entry function are to set the <code>‘major-mode’</code> variable with the value of our mode, to set the</p><p><code>‘mode-name’</code> variable (which determines what name will appear in the status line and buffers menu, for example), and to finally call <code>‘run-hooks’</code> so that the user’s own mode hooks will be called. </p><h2 id="toc6">The most important line</h2><pre>(<span class="keyword">provide</span> '<span class="constant">wpdl-mode</span>)
</pre><p>Finally, we use <code>‘provide’</code></p><p>to expose our mode to the Emacs environment. Users will most likely want to use the <code>‘require’</code> function in the <code>.emacs</code> file to load the mode into the environment.</p><h2 id="toc7">A word about style</h2><p>The
 Emacs lisp manual has a section about style called “Tips and 
Conventions”, including a section about major mode style called “Major 
Mode conventions”. In addition to following these guidelines, you may 
want to use the <a class="local" href="https://www.emacswiki.org/emacs/CheckDoc">CheckDoc</a> tool to help you get your style issues under control, especially concerning the format of the initial comment block.</p><h2 id="toc8">Implementation alternatives</h2><p>Stefan Monnier, an Emacs maintainer, has suggested alternative approaches for indentation and the entry function. His <a class="local" href="https://www.emacswiki.org/emacs/SampleMode">SampleMode</a> gives an outline of these alternative approaches. For example, our entry function could be greatly simplified by deriving <code>wpdl-mode</code> from <code>fundamental-mode</code>, see <a class="local" href="https://www.emacswiki.org/emacs/DerivedMode">DerivedMode</a>. The code to do this is given here:</p><pre><span class="comment">; This can replace (<span class="keyword">defun</span> <span class="function">wpdl-mode</span> ()...</span>
(<span class="keyword">define-derived-mode</span> <span class="function">wpdl-mode</span> fundamental-mode <span class="string">"WPDL"</span>
  <span class="string">"Major mode for editing Workflow Process Description Language files."</span>
  (set (make-local-variable 'font-lock-defaults) '(wpdl-font-lock-keywords))
  (set (make-local-variable 'indent-line-function) 'wpdl-indent-line))
</pre><h2 id="toc9">Acknowledgements</h2><p>Thanks to <a class="local" href="https://www.emacswiki.org/emacs/StefanMonnier">StefanMonnier</a>, <a class="local" href="https://www.emacswiki.org/emacs/ColinMarquardt">ColinMarquardt</a>, <a class="local" href="https://www.emacswiki.org/emacs/AlanMackenzie">AlanMackenzie</a>, Alex, <a class="local" href="https://www.emacswiki.org/emacs/AlanEliasen">AlanEliasen</a>, <a class="local" href="https://www.emacswiki.org/emacs/YoniRabkinKatzenell">YoniRabkinKatzenell</a>, Matt, Cyril, and others for making suggestions and corrections or asking pertinent questions.</p></div><div class="wrapper close"></div></div><div class="footer"><hr><span class="translation bar"><br> <a class="translation es" href="https://www.emacswiki.org/emacs/TutorialModos">Español</a> <a class="translation ru" href="https://www.emacswiki.org/emacs/%D0%A3%D1%80%D0%BE%D0%BA_%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D1%8F_language_mode_%D0%B4%D0%BB%D1%8F_Emacs">Русский</a> <a class="translation new" href="https://www.emacswiki.org/emacs?action=translate;id=ModeTutorial;missing=de_fr_it_ja_ko_pt_se_uk_zh" rel="nofollow">Add Translation</a></span><div class="edit bar"><a accesskey="c" class="comment local" href="https://www.emacswiki.org/emacs/Comments_on_ModeTutorial">Talk</a> <a accesskey="e" class="edit" href="https://www.emacswiki.org/emacs?action=edit;id=ModeTutorial" rel="nofollow" title="Click to edit this page">Edit this page</a> <a class="history" href="https://www.emacswiki.org/emacs?action=history;id=ModeTutorial" rel="nofollow">View other revisions</a> <a class="admin" href="https://www.emacswiki.org/emacs?action=admin;id=ModeTutorial" rel="nofollow">Administration</a></div><div class="time">Last edited 2013-05-14 09:01 UTC by client.yota.ru <a class="diff" href="https://www.emacswiki.org/emacs?action=browse;diff=2;id=ModeTutorial" rel="nofollow">(diff)</a></div><div style="float:right; margin-left:1ex;">
<!-- Creative Commons License -->
<a class="licence" href="https://creativecommons.org/licenses/GPL/2.0/"><img alt="CC-GNU GPL" style="border:none" src="EmacsWiki%20%20Mode%20Tutorial_files/cc-GPL-a.png"></a>
<!-- /Creative Commons License -->
</div>

<!--
<rdf:RDF xmlns="http://web.resource.org/cc/"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <license rdf:resource="https://creativecommons.org/licenses/GPL/2.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Software" />
</Work>

<License rdf:about="https://creativecommons.org/licenses/GPL/2.0/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
   <requires rdf:resource="http://web.resource.org/cc/SourceCode" />
</License>
</rdf:RDF>
-->

<p class="legal">
This work is licensed to you under version 2 of the
<a href="https://www.gnu.org/">GNU</a> <a href="https://www.emacswiki.org/GPL">General Public License</a>.
Alternatively, you may choose to receive this work under any other
license that grants the right to use, copy, modify, and/or distribute
the work, as long as that license imposes the restriction that
derivative works have to grant the same rights and impose the same
restriction. For example, you may choose to receive this work under
the
<a href="https://www.gnu.org/">GNU</a>
<a href="https://www.emacswiki.org/FDL">Free Documentation License</a>, the
<a href="https://creativecommons.org/">CreativeCommons</a>
<a href="https://creativecommons.org/licenses/sa/1.0/">ShareAlike</a>
License, the XEmacs manual license, or
<a href="https://www.emacswiki.org/OLD">similar licenses</a>.
</p>
<p class="legal" style="padding-top: 0.5em">Please note our <a href="https://www.emacswiki.org/emacs/Privacy">Privacy Statement</a>.</p>
</div>


</body></html>