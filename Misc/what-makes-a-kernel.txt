###############################################################################
# NAME:		    what-makes-a-kernel.txt
#
# AUTHOR:	    Ethan D. Twardy
#
# DESCRIPTION:	    This is a description of some of the many interfaces that
#		    a kernel provides.
#		    TODO: Elaborate on all of these
#
# CREATED:	    02/14/2018
#
# LAST EDITED:	    02/14/2018
###

###############################################################################
# BIOS/BOOTLOADER INTERFACE
###

The BIOS/EFI interacts with the kernel during the boot process via the
kernel command line.

###############################################################################
# DEVICE DRIVERS
###

    Device drivers communicate with the hardware on behalf of the kernel or
user-space processes. These drivers can be controlled via system calls or
directly by interfaces that are exported by the driver. The driver also
communicates with the kernel to arrange for resource management.

Monolithic drivers
******************

    In monolithic kernels, the drivers are part of the kernel--this has a few
implications.

Exokernel drivers
*****************

Microkernel drivers
*******************

Hybrid drivers
**************

EFI drivers
***********

###############################################################################
# PROCESS COMMUNICATION
###

File
****

Signal
******

Sockets & Unix Domain Sockets
*****************************

Message Queue
*************

Pipes & Named Pipes
*******************

Shared Memory
*************

Message Passing
***************

Memory-Mapped File
******************

###############################################################################
# RESOURCE MANAGEMENT
###

Semaphores
**********

Spinlocks
*********

    Spinlocks do not exist in single processor systems. This is on purpose--
if a resource is not available, there is no reason for context to be updated
simply so that a process can do nothing for the entirety of its quanta.
Preemption may or may not exist in single processor systems. See the section
on scheduling for a description of preemption.

Mutex (Mutual Exclusion)
************************

Barrier
*******

Memory Protection (With a HW MMU)
*********************************

Memory Protection (Without an MMU)
**********************************

###############################################################################
# SCHEDULING
###

Preemption
**********

    Preemption is a feature that allows the scheduler to force a context switch
to perform a task with a higher priority than the currently scheduled task.
This prevents two kinds of driver problems which can occur in microkernels:

    1: If a driver enters an infinite loop, it can still be preempted.
    2: Some drivers and system calls are slow to execute, and will not return
    control of the processor to the scheduler until they complete, that is
    unless they are preempted.

The most important thing to remember about writing kernel code in version 2.6+
is that code must be reentrant even on single-processor systems, as the kernel
views them pretty similarly.

###############################################################################
# CONTEXTS AND INTERRUPTS
###

Contexts
********

    - User context (different from user-space; this is the KERNEL executing on
    behalf of a user-space process) can be interrupted by sirq or hirq.
    - Interrupt context: Executing a software or hardware interrupt handler.
    - Kernel context: A general term for when the processor is not executing in
    either one of the above contexts, and also not in user-space.

Interrupts
**********

    - Hardware Interrupt: Not preemptible. This is an interrupt generated by a
    hardware device, such as a timer, the processor, an interface, or
    peripheral.
    - Software Interrupt: A general and somewhat broad term for any interrupt
    that is not generated by the hardware. Specifically in the case of Linux,
    a softirq is one of 32 enumerated software interrupts.
    - Tasklet: A dynamically-registerable sirq, which is guaranteed to be
    running on only one CPU at a time.
    - Timer: A dynamically-registerable sirq, which is run at (or close to) a
    particular time. Very similar to a Tasklet.

###############################################################################
# USER PROCESS SERVICES
###

System Calls (syscalls)
***********************

Traps
*****

    These are hardware implemented, and usually force a context switch. See the
section on Signals in PROCESS COMMUNICATION for an explanation of this kind of
service.

###############################################################################
