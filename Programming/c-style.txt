###############################################################################
# NAME:		    c-style.txt
#
# AUTHOR:	    Ethan D. Twardy
#
# DESCRIPTION:	    A description of the C Programming style guidelines adhered
#		    to by the author(s) of these C repositories.
#
# CREATED:	    06/05/2017
#
# LAST EDITED:	    02/17/2018
###

###############################################################################
# STYLE COMMENTS
###

File Banner:
************

    All files must begin with a banner consisting of a single C style comment.
The first line must be a backslash, followed by a line of '*' characters and
terminating at the 80th column. The banner will contain at least the fields
specified below. Any additional fields will be at the discretion of the author.
There will be one line between each field, consisting of a '*' character,
correctly aligned, and no more. If any field must exceed the 80th column,
it must continue on a new line beginning with a '*' character and the text
aligned with that above. See below for an example. The final line of the
comment will consist of three '*' characters followed by a backslash to
terminate the comment.

    /***************************************************(...to the 79th column)
     * NAME:		Filename, including ext, indented to 20th column
     *
     * AUTHOR:		The author of the file, indented to 20th column.
     *
     * DESCRIPTION:	A thorough description of the contents contained within
     *			the file. Text will wrap onto the next line as shown
     *			here. This field is also indented to the 20th column.
     *
     * CREATED:		The date of file creation, indented to the 20th column.
     *
     * LAST EDITED:	Last edition of the file, indented to the 20th column.
     ***/

Function Banners:
*****************

    All functions must have a banner describing the use and purpose of the
function. This banner is not required in the header file, and must follow
the form shown below:

    /*********************************************************(...to column 79)
     * FUNCTION:	name of the function, aligned to 20th column
     * 
     * DESCRIPTION:	A thorough description of the function, aligned to 20th
     *			column. Extra text wraps like so.
     * 
     * ARGUMENTS:	<name>: (<type>) - A short description of what this
     *			    variable represents. Wrapped text is tabbed in 4
     *			    columns to the first line. Example:
     *			destroy: (int (*)(void *)) - `destroy' is a pointer to
     *			    a function which taked a (void *) and returns int.
     * 
     * RETURNS:		<type> - Possible values for the type here. Aligned to
     *			20th column. Text wraps like so.
     * 
     * NOTES:		Aligned to 20th column. Asymptotic analysis and side-
     *			effects may be detailed here. 
     ***/

    This is larger than my previous banners, however it will contain more
information, look a little neater, and also use only C style comments. Any
fields which are not filled in should contain the word `none.' in some fashion.

Section Banners:
****************

    All source files will be separated into logical `sections'. These sections
are defined by the types of statements which occur within them. In this way,
declarations are all contained together, function definitions are all contained
together, etc. The common sections in Header and Source files can be found in
the next section. Sections are delimited by obvious banner comments, which
follow the convention shown below:

    /*********************************************************(...to column 79)
     * SECTION NAME IN UPPERCASE
     ***/

###############################################################################
# FILE ORGANIZATION
###

Header File Organization:
*************************

    The organization of declarations in the header files follows the layout
given below:

    * Includes
    * Defines
    * External References
    * Constants
    * Type Definitions, Enumerations & Structures
    * Function Prototypes (Always declared extern)

Source File Organization:
*************************

    Source code files must follow the organization detailed below: 

    * Includes
    * Defines
    * External References
    * Global Variables, Constants
    * Static Function Prototypes
    * API Functions (Defined here, declared in header)
    * Main Function (If applicable)
    * Static/Local Functions

    Use of static and/or inline keywords is preferred, whenever appropriate,
and ONLY when appropriate. In addition, use const and/or restrict keywords
whenever possible.

Define Guards:
**************

    Functions are not to be defined within header files. Header files must
always contain define guards of the form below:

    #ifndef __HEADER_H__
    #define __HEADER_H__
    ...
    #endif /* __HEADER_H__ */

    It may also be necessary to include define guards around function
prototypes, which may be conditionally compiled, implementation pending,
however function prototypes do not need to have banners documenting the
function and its uses. It may be necessary to have define guards for API
functions. An example of this is shown below:

    (In cmd.h)
    ...
    #ifdef COMPILE_CMD
    ...
    #define CMD
    extern void do_cmd(void);
    ...
    #endif

    (In cmd.c)
    ...
    #ifdef CMD
    void do_cmd(void)
    {
	...
    }
    #endif

    In this way, compilation of each individual function is controlled by the
header file. Sections are separated by a C style comment that contains '*'
characters up to but not exceeding the 79th column, followed by a line that
contains a '*' character followed by a space and a section title in uppercase
which accurately describes the contents of the section. The final line contains
three '*' characters terminated by a backslash, ending the comment. The final
line in the file is a C style comment, consisting of a backslash, a line of '*'
characters, and terminating on the 80th column with a backslash. Function
prototypes will not have named parameters. Names will be included only in the
definition of these functions.

###############################################################################
# NAMING CONVENTIONS
###

    No strict conventions exist for naming files, however for ease of typing,
filenames are usually all lowercase and words are separated via single hyphens.
Variable and function names must either be lowercase or camel case. If more
than one word is required, the words must be separated by an underscore. An
example is shown below:

    int * pInt;		    /* Okay */
    int * p_to_int;	    /* Okay */
    int * PINT;		    /* Not okay */
    int this_a_fn(void);    /* Okay */
    int alsoAFn(void);	    /* Okay */
    int also_A_Fn(void);    /* Weird, but okay */

    Macros and Preprocessor directives must be capitalized, and words must be
separated by underscores. Macros with parameters or vardiadic macros may follow
the naming conventions of functions if they are to be used like functions.
examples are given below:

    #define A_MACRO_NAME	    /* Okay */
    #define PARAMETERS(a, b, c)	    /* Okay */
    #define parameters(a, b, c)	    /* Okay */
    #define theseParms(...)	    /* Okay */

    API function (functions that exist in the global namespace) prototypes must
have named parameters. This is to aid documentation of the header file. Users
of the API should be able to read the header file ONLY and use the API
seamlessly. Static function prototypes may or may not have named parameters. If
a function does not take parameters (API or Static) it must explicitly declare
void. This is because some compilers will not check parameters if no parameters
are given, which could lead to some careless mistakes.

###############################################################################
# OTHER CONVENTIONS
###

Brackets:
*********

    For all bracketed statements--except conditionals, loops, and macros with
parameters--brackets must occupy their own line in the source. Conditionals,
macros, and loop statements do not require brackets if it is possible to omit
them. If a function definition exceeds the 79 character limit, it is to
continue on the next line, in such a way as to neatly provide the function
parameters. A few examples of complete and correct function definitions are
shown below:

    static void really_long_func_name(const void * restrict long_pointer_name1,
				      const void * restrict long_pointer_name2)
    {
	...
    }

    int * anotherCorrectName(int one, int two)
    {
	...
    }

###############################################################################
